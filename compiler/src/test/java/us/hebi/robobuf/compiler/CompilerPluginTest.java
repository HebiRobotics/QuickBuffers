package us.hebi.robobuf.compiler;

import com.google.protobuf.DescriptorProtos.FileDescriptorProto;
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest;
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse;
import org.junit.Ignore;
import org.junit.Test;
import us.hebi.robobuf.parser.ParserUtil;

import java.io.IOException;
import java.util.Map;

/**
 * Plays requests generated by the protoc binary into the system and checks
 * their output.
 *
 * @author Florian Enner
 * @since 05 Aug 2019
 */
public class CompilerPluginTest {

    @Test
    public void testSimpleRequest() throws IOException {
        CodeGeneratorRequest request = TestRequestLoader.getSimpleRequest();
        CodeGeneratorResponse response = CompilerPlugin.handleRequest(request);
    }

    @Test
    public void testImportRequest() throws IOException {
        CodeGeneratorRequest request = TestRequestLoader.getImportRequest();
        CodeGeneratorResponse response = CompilerPlugin.handleRequest(request);
    }

    @Ignore
    @Test
    public void printRequestPackages() throws IOException {

        CodeGeneratorRequest request = TestRequestLoader.getImportRequest();
        Map<String, String> params = ParserUtil.getGeneratorParameters(request);
        for (FileDescriptorProto proto : request.getProtoFileList()) {
            FileParams fileParams = new FileParams(params, proto);
        }

        System.out.println("Files to generate\n");
        request.getFileToGenerateList().forEach(System.out::println);

        System.out.println("\n\nProto files\n");
        request.getProtoFileList().forEach(file -> {
            System.out.println(file.toBuilder()
                    .clearSourceCodeInfo()
//                    .clearMessageType()
//                    .clearEnumType()
                    .build());
        });

    }

}