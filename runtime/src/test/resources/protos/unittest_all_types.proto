// Adapted from Google's javanano unit tests

syntax = "proto2";
package quickbuf_unittest;

import "namespaces.proto";

option java_package = "protos.test.protobuf";
option java_outer_classname = "AllTypesOuterClass";
option java_multiple_files = true;

message TestAllTypes {

  message NestedMessage {
    optional int32 bb = 1;
  }

  enum NestedEnum {
    FOO = 1;
    BAR = 2;
    BAZ = 3;
  }

  // Singular
  optional    int32 optional_int32    =  1 [json_name = "optionalInt32"]; // stays in descriptor
  optional    int64 optional_int64    =  2;
  optional   uint32 optional_uint32   =  3;
  optional   uint64 optional_uint64   =  4;
  optional   sint32 optional_sint32   =  5;
  optional   sint64 optional_sint64   =  6;
  optional  fixed32 optional_fixed32  =  7;
  optional  fixed64 optional_fixed64  =  8;
  optional sfixed32 optional_sfixed32 =  9;
  optional sfixed64 optional_sfixed64 = 10;
  optional    float optional_float    = 11;
  optional   double optional_double   = 12;
  optional     bool optional_bool     = 13;
  optional   string optional_string   = 14;
  optional    bytes optional_bytes    = 15;

  optional group OptionalGroup = 16 {
    optional int32 a = 17;
  }

  optional NestedMessage      optional_nested_message  = 18;
  optional ForeignMessage optional_foreign_message = 19;
  optional quickbuf_unittest_import.ImportMessage optional_import_message = 20;

  optional NestedEnum      optional_nested_enum     = 21;
  optional ForeignEnum optional_foreign_enum = 22;
  optional quickbuf_unittest_import.ImportEnum  optional_import_enum = 23;

  optional string optional_string_piece = 24 [ctype=STRING_PIECE];
  optional string optional_cord = 25 [ctype=CORD];

  // Repeated
  repeated    int32 repeated_int32    = 31;
  repeated    int64 repeated_int64    = 32;
  repeated   uint32 repeated_uint32   = 33;
  repeated   uint64 repeated_uint64   = 34;
  repeated   sint32 repeated_sint32   = 35;
  repeated   sint64 repeated_sint64   = 36;
  repeated  fixed32 repeated_fixed32  = 37;
  repeated  fixed64 repeated_fixed64  = 38;
  repeated sfixed32 repeated_sfixed32 = 39;
  repeated sfixed64 repeated_sfixed64 = 40;
  repeated    float repeated_float    = 41;
  repeated   double repeated_double   = 42;
  repeated     bool repeated_bool     = 43;
  repeated   string repeated_string   = 44;
  repeated    bytes repeated_bytes    = 45;

  repeated group RepeatedGroup = 46 {
    optional int32 a = 47;
  }

  repeated NestedMessage      repeated_nested_message  = 48;
  repeated ForeignMessage repeated_foreign_message = 49;
  repeated quickbuf_unittest_import.ImportMessage  repeated_import_message = 50;

  repeated NestedEnum      repeated_nested_enum  = 51;
  repeated ForeignEnum repeated_foreign_enum = 52;
  repeated quickbuf_unittest_import.ImportEnum repeated_import_enum = 53;

  repeated string repeated_string_piece = 54 [ctype=STRING_PIECE];
  repeated string repeated_cord = 55 [ctype=CORD];

  // Repeated packed
  repeated    int32 repeated_packed_int32    = 87 [packed=true];
  repeated sfixed64 repeated_packed_sfixed64 = 88 [packed=true];

  repeated NestedEnum repeated_packed_nested_enum  = 89 [packed=true];

  // Singular with defaults
  optional    int32 default_int32    = 61 [default =  41    ];
  optional    int64 default_int64    = 62 [default =  42    ];
  optional   uint32 default_uint32   = 63 [default =  43    ];
  optional   uint64 default_uint64   = 64 [default =  44    ];
  optional   sint32 default_sint32   = 65 [default = -45    ];
  optional   sint64 default_sint64   = 66 [default =  46    ];
  optional  fixed32 default_fixed32  = 67 [default =  47    ];
  optional  fixed64 default_fixed64  = 68 [default =  48    ];
  optional sfixed32 default_sfixed32 = 69 [default =  49    ];
  optional sfixed64 default_sfixed64 = 70 [default = -50    ];
  optional    float default_float    = 71 [default =  51.5  ];
  optional   double default_double   = 72 [default =  52e3  ];
  optional     bool default_bool     = 73 [default = true   ];
  optional   string default_string   = 74 [default = "hello"];
  optional    bytes default_bytes    = 75 [default = "world"];

  optional string default_string_nonascii = 76 [default = "dünya"];
  optional  bytes default_bytes_nonascii  = 77 [default = "dünyab"];

  optional  float default_float_inf      = 97  [default =  inf];
  optional  float default_float_neg_inf  = 98  [default = -inf];
  optional  float default_float_nan      = 99  [default =  nan];
  optional double default_double_inf     = 100 [default =  inf];
  optional double default_double_neg_inf = 101 [default = -inf];
  optional double default_double_nan     = 102 [default =  nan];

  optional NestedEnum default_nested_enum = 81 [default = BAR];
  optional ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
  optional quickbuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];

  optional string default_string_piece = 84 [ctype=STRING_PIECE,default="abc"];
  optional string default_cord = 85 [ctype=CORD,default="123"];

  optional int32 id = 86;

  // Try to cause conflicts
  optional string tag = 93;
  optional double get_serialized_size = 94;
  optional double write_to = 95;

  // Try to fail with java reserved keywords
  optional double synchronized = 96;

  // Collisions with generated methods
  optional double serialized_size = 300;
  optional double cached_size = 301;
  optional double missing_fields = 302;
  optional double unknown_bytes = 303;
  optional double quick = 304;

  // Collisions with inherited methods
  optional double class = 305;

  oneof oneof_field {
    uint32 oneof_uint32 = 111;
    NestedMessage oneof_nested_message = 112;
    string oneof_string = 123;
    bytes oneof_bytes = 124;
    fixed64 oneof_fixed64 = 115;
    NestedEnum oneof_enum = 116;
  }

  oneof oneof_field2 {
    uint32 oneof2_uint32 = 117;
  }

  // Try to fail with internally used argument names
  optional int32 value = 10001;
  repeated int32 values = 10002;
  optional int32 other = 10003;
  optional int32 input = 100004;
  optional int32 output = 100005;
  optional string decoder = 100006;

  // extensions
  extensions 1200 to 2000;

  // message_set test case.
  message MessageSetCorrect {
    option message_set_wire_format = true;

    extensions 4 to max;
  }

  message MessageSetCorrectExtension1 {
    extend MessageSetCorrect {
      optional MessageSetCorrectExtension1 message_set_extension = 1547769;
    }
    optional string str = 25;
  }

  message MessageSetCorrectExtension2 {
    extend MessageSetCorrect {
      optional MessageSetCorrectExtension2 message_set_extension = 4135312;
    }
    optional int32 i = 9;
  }

}

extend TestAllTypes {
  optional int32 extension_int32 = 1200;
}

message ForeignMessage {
  optional int32 c = 1;
}

enum ForeignEnum {
  //default = 1; // test keyword renaming (works, but lite runtime fails)
  FOREIGN_FOO = 4;
  FOREIGN_BAR = 5;
  FOREIGN_BAZ = 6;
}

message TestExtremeDefaultValues {
  optional bytes escaped_bytes = 1 [default = "\0\001\a\b\f\n\r\t\v\\\'\"\xfe"];
  optional uint32 large_uint32 = 2 [default = 0xFFFFFFFF];
  optional uint64 large_uint64 = 3 [default = 0xFFFFFFFFFFFFFFFF];
  optional  int32 small_int32  = 4 [default = -0x7FFFFFFF];
  optional  int64 small_int64  = 5 [default = -0x7FFFFFFFFFFFFFFF];
  optional  int32 really_small_int32 = 21 [default = -0x80000000];
  optional  int64 really_small_int64 = 22 [default = -0x8000000000000000];

  // The default value here is UTF-8 for "\u1234".  (We could also just type
  // the UTF-8 text directly into this text file rather than escape it, but
  // lots of people use editors that would be confused by this.)
  optional string utf8_string = 6 [default = "\341\210\264"];

  // Tests for single-precision floating-point values.
  optional float zero_float = 7 [default = 0];
  optional float one_float = 8 [default = 1];
  optional float small_float = 9 [default = 1.5];
  optional float negative_one_float = 10 [default = -1];
  optional float negative_float = 11 [default = -1.5];
  // Using exponents
  optional float large_float = 12 [default = 2E8];
  optional float small_negative_float = 13 [default = -8e-28];

  optional fixed64 large_fixed64 = 248 [default = 10123456789123456789];
  optional fixed32 large_fixed32 = 247 [default = 2123456789];

  // Text for nonfinite floating-point values.
  optional double inf_double = 14 [default = inf];
  optional double neg_inf_double = 15 [default = -inf];
  optional double nan_double = 16 [default = nan];
  optional float inf_float = 17 [default = inf];
  optional float neg_inf_float = 18 [default = -inf];
  optional float nan_float = 19 [default = nan];

  // Tests for C++ trigraphs.
  // Trigraphs should be escaped in C++ generated files, but they should not be
  // escaped for other languages.
  // Note that in .proto file, "\?" is a valid way to escape ? in string
  // literals.
  optional string cpp_trigraph = 20 [default = "? \? ?? \?? \??? ??/ ?\?-"];

  // String defaults containing the character '\000'
  optional string string_with_zero       = 23 [default = "hel\000lo"];
  optional  bytes bytes_with_zero        = 24 [default = "wor\000ld"];
  optional string string_piece_with_zero = 25 [ctype=STRING_PIECE,
    default="ab\000c"];
  optional string cord_with_zero         = 26 [ctype=CORD,
    default="12\0003"];
  optional string replacement_string     = 27 [default="${unknown}"];
}

message TestCommentInjectionMessage {
  // */ <- This should not close the generated doc comment
  optional string a = 1 [default="*/ <- Neither should this."];
}

message TestEnumsMessage {
  // From https://protobuf.dev/programming-guides/proto3/:
  //   You can define aliases by assigning the same value to different enum constants.
  //   To do this you need to set the allow_alias option to true, otherwise the protocol
  //   compiler generates a warning message when aliases are found. Though all alias
  //   values are valid during deserialization, the first value is always used when serializing.
  enum EnumAllowingAlias {
    option allow_alias = true;
    EAA_UNSPECIFIED = 0;
    EAA_STARTED = 1;
    EAA_RUNNING = 1;
    EAA_FINISHED = 2;
  }
  optional EnumAllowingAlias field = 1;
  optional EnumAllowingAlias defaultStarted = 2 [default = EAA_STARTED];
  optional EnumAllowingAlias defaultRunning = 3 [default = EAA_RUNNING];
}