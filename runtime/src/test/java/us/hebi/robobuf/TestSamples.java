package us.hebi.robobuf;

import us.hebi.robobuf.java.AllTypesOuterClass.ForeignEnum;
import us.hebi.robobuf.java.AllTypesOuterClass.TestAllSupportedTypes;
import us.hebi.robobuf.java.AllTypesOuterClass.TestAllSupportedTypes.NestedEnum;
import us.hebi.robobuf.java.external.ImportEnum;

import java.util.Arrays;

/**
 * "ground-truth" data generated by protobuf-Java
 *
 * @author Florian Enner
 * @since 13 Aug 2019
 */
public class TestSamples {

    static byte[] optionalPrimitives() {
        TestAllSupportedTypes msg = TestAllSupportedTypes.newBuilder()
                .setId(99) // needs to be set
                .setOptionalBool(true)
                .setOptionalDouble(100.0d)
                .setOptionalFloat(101.0f)
                .setOptionalFixed32(102)
                .setOptionalFixed64(103)
                .setOptionalSfixed32(104)
                .setOptionalSfixed64(105)
                .setOptionalSint32(106)
                .setOptionalSint64(107)
                .setOptionalInt32(108)
                .setOptionalInt64(109)
                .setOptionalUint32(110)
                .setOptionalUint64(111)
                .build();
        return msg.toByteArray();
    }

    static byte[] repeatedPrimitives() {
        TestAllSupportedTypes msg = TestAllSupportedTypes.newBuilder()
                .setId(0)
                .addAllRepeatedBool(Arrays.asList(true, false, true, true))
                .addAllRepeatedDouble(Arrays.asList(1d, 2d, 3d, 4d))
                .addAllRepeatedFloat(Arrays.asList(10f, 20f, 30f, 40f))
                .addAllRepeatedFixed32(Arrays.asList(2, 3, 4, 5))
                .addAllRepeatedFixed64(Arrays.asList(5L, 6L, 7L, 8L))
                .addAllRepeatedSfixed32(Arrays.asList(2, 3, 4, 5))
                .addAllRepeatedSfixed64(Arrays.asList(5L, 6L, 7L, 8L))
                .addAllRepeatedSint32(Arrays.asList(2, 3, 4, 5))
                .addAllRepeatedSint64(Arrays.asList(5L, 6L, 7L, 8L))
                .addAllRepeatedInt32(Arrays.asList(2, 3, 4, 5))
                .addAllRepeatedInt64(Arrays.asList(5L, 6L, 7L, 8L))
                .addAllRepeatedUint32(Arrays.asList(2, 3, 4, 5))
                .addAllRepeatedUint64(Arrays.asList(5L, 6L, 7L, 8L))
                .build();
        return msg.toByteArray();
    }

    static byte[] optionalEnums() {
        TestAllSupportedTypes msg = TestAllSupportedTypes.newBuilder()
                .setId(0)
                .setOptionalNestedEnum(NestedEnum.FOO)
                .setOptionalForeignEnum(ForeignEnum.FOREIGN_BAR)
                .setOptionalImportEnum(ImportEnum.IMPORT_BAZ)
                .build();
        return msg.toByteArray();
    }

    static byte[] optionalString() {
        TestAllSupportedTypes msg = TestAllSupportedTypes.newBuilder()
                .setId(0)
                .setOptionalNestedEnum(NestedEnum.FOO)
                .setOptionalForeignEnum(ForeignEnum.FOREIGN_BAR)
                .setOptionalImportEnum(ImportEnum.IMPORT_BAZ)
                .build();
        return msg.toByteArray();
    }

}


