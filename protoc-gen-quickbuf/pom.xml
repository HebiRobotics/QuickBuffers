<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>quickbuf-parent</artifactId>
        <groupId>us.hebi.quickbuf</groupId>
        <version>1.4-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>protoc-gen-quickbuf</artifactId>

    <properties>
        <protocPluginName>${project.artifactId}</protocPluginName>
        <finalName>${protocPluginName}-${project.version}-shaded</finalName>
        <javaModuleName>us.hebi.quickbuf.generator</javaModuleName>
        <mainClass>us.hebi.quickbuf.generator.QuickbufPlugin</mainClass>

        <protoc.fileName>protoc-${protobuf.version}-${protoc.os}-${protoc.arch}.exe</protoc.fileName>
        <protoc.path>${project.basedir}/../.protoc</protoc.path>
        <protoc.executable>${protoc.path}/${protoc.fileName}</protoc.executable>
        <protoc.outputDir>${project.build.directory}/test-classes/us/hebi/quickbuf/generator</protoc.outputDir>
        <proto.dir.unsupported>${project.basedir}/src/test/resources/protos/unsupported</proto.dir.unsupported>
    </properties>

    <dependencies>

        <!-- stores request input as binary that we can load in unit tests -->
        <dependency>
            <groupId>us.hebi.quickbuf</groupId>
            <artifactId>protoc-gen-request</artifactId>
            <version>${project.parent.version}</version>
        </dependency>

        <dependency>
            <groupId>com.squareup</groupId>
            <artifactId>javapoet</artifactId>
        </dependency>

        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>

            <!-- Generate sample compiler plugin requests that we can work with in unit tests -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>generate-test-sources</id>
                        <phase>generate-test-sources</phase>
                        <configuration>
                            <target>

                                <!-- download proto compiler if needed -->
                                <mkdir dir="${protoc.path}"/>
                                <get src="https://repo.maven.apache.org/maven2/com/google/protobuf/protoc/${protobuf.version}/${protoc.fileName}"
                                     dest="${protoc.executable}" skipexisting="true" verbose="on"/>
                                <chmod file="${protoc.executable}" perm="775" type="file"/>

                                <mkdir dir="${protoc.outputDir}"/>
                                <exec executable="${protoc.executable}">
                                    <arg value="--plugin=protoc-gen-request=${protoc.requestPlugin}"/>
                                    <arg value="--request_out=request_file=required.request,indent=tab,input_order=quickbuf,enforce_has_checks=true:${protoc.outputDir}"/>
                                    <arg value="--proto_path=${proto.dir}/"/>
                                    <arg value="${proto.dir}/unittest_required.proto"/>
                                </exec>
                                <exec executable="${protoc.executable}">
                                    <arg value="--plugin=protoc-gen-request=${protoc.requestPlugin}"/>
                                    <arg value="--request_out=request_file=import.request,indent=2,input_order=number:${protoc.outputDir}"/>
                                    <arg value="--proto_path=${proto.dir}/"/>
                                    <arg value="${proto.dir}/namespaces.proto"/>
                                    <arg value="${proto.dir}/namespaces_import.proto"/>
                                    <arg value="${proto.dir}/unittest_default_package_imports.proto"/>
                                </exec>
                                <exec executable="${protoc.executable}">
                                    <arg value="--plugin=protoc-gen-request=${protoc.requestPlugin}"/>
                                    <arg value="--request_out=request_file=allTypes_eager.request,replace_package=(protobuf)=quickbuf,input_order=none,store_unknown_fields=true,allocation=eager:${protoc.outputDir}"/>
                                    <arg value="--proto_path=${proto.dir}/"/>
                                    <arg value="${proto.dir}/namespaces.proto"/>
                                    <arg value="${proto.dir}/unittest_all_types.proto"/>
                                </exec>
                                <exec executable="${protoc.executable}">
                                    <arg value="--plugin=protoc-gen-request=${protoc.requestPlugin}"/>
                                    <arg value="--request_out=request_file=allTypes_lazy.request,replace_package=(protobuf)=quickbuf,input_order=none,store_unknown_fields=true,allocation=lazy:${protoc.outputDir}"/>
                                    <arg value="--proto_path=${proto.dir}/"/>
                                    <arg value="${proto.dir}/namespaces.proto"/>
                                    <arg value="${proto.dir}/unittest_all_types.proto"/>
                                </exec>
                                <exec executable="${protoc.executable}">
                                    <arg value="--plugin=protoc-gen-request=${protoc.requestPlugin}"/>
                                    <arg value="--request_out=request_file=repeatedPackables.request,replace_package=(protobuf)=quickbuf:${protoc.outputDir}"/>
                                    <arg value="--proto_path=${proto.dir}/"/>
                                    <arg value="${proto.dir}/unittest_repeated_packables.proto"/>
                                </exec>
                                <exec executable="${protoc.executable}">
                                    <arg value="--plugin=protoc-gen-request=${protoc.requestPlugin}"/>
                                    <arg value="--request_out=request_file=unsupported_extension.request,replace_package=(protobuf)=quickbuf:${protoc.outputDir}"/>
                                    <arg value="--proto_path=${proto.dir.unsupported}/"/>
                                    <arg value="${proto.dir.unsupported}/extension.proto"/>
                                </exec>
                                <exec executable="${protoc.executable}">
                                    <arg value="--plugin=protoc-gen-request=${protoc.requestPlugin}"/>
                                    <arg value="--request_out=request_file=unsupported_map.request,replace_package=(protobuf)=quickbuf:${protoc.outputDir}"/>
                                    <arg value="--proto_path=${proto.dir.unsupported}/"/>
                                    <arg value="${proto.dir.unsupported}/map.proto"/>
                                </exec>
                                <exec executable="${protoc.executable}">
                                    <arg value="--plugin=protoc-gen-request=${protoc.requestPlugin}"/>
                                    <arg value="--request_out=request_file=unsupported_recursion.request,replace_package=(protobuf)=quickbuf:${protoc.outputDir}"/>
                                    <arg value="--proto_path=${proto.dir.unsupported}/"/>
                                    <arg value="${proto.dir.unsupported}/recursion.proto"/>
                                </exec>
                                <exec executable="${protoc.executable}">
                                    <arg value="--plugin=protoc-gen-request=${protoc.requestPlugin}"/>
                                    <arg value="--request_out=request_file=lazy_recursion.request,replace_package=(protobuf)=quickbuf,allocation=lazy:${protoc.outputDir}"/>
                                    <arg value="--proto_path=${proto.dir.unsupported}/"/>
                                    <arg value="${proto.dir.unsupported}/recursion.proto"/>
                                </exec>
                                <exec executable="${protoc.executable}">
                                    <arg value="--plugin=protoc-gen-request=${protoc.requestPlugin}"/>
                                    <arg value="--request_out=request_file=unsupported_proto3.request,replace_package=(protobuf)=quickbuf,allocation=lazy:${protoc.outputDir}"/>
                                    <arg value="--proto_path=${proto.dir.unsupported}/"/>
                                    <arg value="${proto.dir.unsupported}/proto3.proto"/>
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Create uber-jar that we can call as a plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
            </plugin>

            <!-- Plugins required for publishing to Maven Central -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <!-- It's hard to add the real replaced java file because the source-plugin
                requires things to be added as sources that then would also get compiled -->
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
            </plugin>

        </plugins>
    </build>

    <profiles>
        <profile>
            <id>shade</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>

                    <!-- Add scripts that can be executed by protoc -->
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>copy-plugin-scripts</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Windows Script-->
                                        <mkdir dir="target"/>
                                        <copy file="src/main/scripts/windows.bat" tofile="target/${protocPluginName}.bat"/>
                                        <replace file="target/${protocPluginName}.bat" token="{jarfile}" value="${finalName}"/>
                                        <fixcrlf file="target/${protocPluginName}.bat" eol="dos"/>

                                        <!-- Unix Script -->
                                        <copy file="src/main/scripts/unix.sh" tofile="target/${protocPluginName}"/>
                                        <replace file="target/${protocPluginName}" token="{jarfile}" value="${finalName}"/>
                                        <fixcrlf file="target/${protocPluginName}" eol="unix"/>
                                        <chmod file="target/${protocPluginName}" perm="775" type="file"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Create zip file that contains executable scripts -->
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>3.1.0</version>
                        <configuration>
                            <descriptors>
                                <descriptor>src/main/assembly/protoc-gen-quickbuf.xml</descriptor>
                            </descriptors>
                            <finalName>${finalName}</finalName>
                            <appendAssemblyId>false</appendAssemblyId>
                        </configuration>
                        <executions>
                            <execution>
                                <id>make-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>native</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.graalvm.buildtools</groupId>
                        <artifactId>native-maven-plugin</artifactId>
                        <version>${graalvm.tools.version}</version>
                        <extensions>true</extensions>
                        <executions>
                            <execution>
                                <id>build-native</id>
                                <goals>
                                    <goal>compile-no-fork</goal>
                                </goals>
                                <phase>package</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <skip>false</skip>
                            <skipNativeTests>true</skipNativeTests> <!-- TODO: change to junit platform >5.8 -->
                            <useArgFile>false</useArgFile>
                            <imageName>${finalName}-${protoc.os}-${protoc.arch}${native.extension}</imageName>
                            <classpath>
                                <param>${project.build.directory}/${finalName}.jar</param>
                            </classpath>
                            <buildArgs>
                                <arg>-march=compatibility</arg> <!-- support older processors (see #54) -->
                                <arg>--no-fallback</arg>
                                <arg>--verbose</arg>
                                <arg>${native.staticArg}</arg>
                            </buildArgs>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>