/*-
 * #%L
 * robobuf-benchmarks
 * %%
 * Copyright (C) 2019 HEBI Robotics
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

// automatically generated by the FlatBuffers compiler, do not modify

package protos.benchmarks.flatbuffers.fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FooBar extends Table {
  public static FooBar getRootAsFooBar(ByteBuffer _bb) { return getRootAsFooBar(_bb, new FooBar()); }
  public static FooBar getRootAsFooBar(ByteBuffer _bb, FooBar obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public FooBar __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bar sibling() { return sibling(new Bar()); }
  public Bar sibling(Bar obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public double rating() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public int postfix() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static void startFooBar(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addSibling(FlatBufferBuilder builder, int siblingOffset) { builder.addStruct(0, siblingOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addRating(FlatBufferBuilder builder, double rating) { builder.addDouble(2, rating, 0.0); }
  public static void addPostfix(FlatBufferBuilder builder, int postfix) { builder.addByte(3, (byte)postfix, (byte)0); }
  public static int endFooBar(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

