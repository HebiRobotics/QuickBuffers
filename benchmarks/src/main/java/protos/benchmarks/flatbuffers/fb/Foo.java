/*-
 * #%L
 * quickbuf-benchmarks
 * %%
 * Copyright (C) 2019 HEBI Robotics
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

// automatically generated by the FlatBuffers compiler, do not modify

package protos.benchmarks.flatbuffers.fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Foo extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Foo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long id() { return bb.getLong(bb_pos + 0); }
  public short count() { return bb.getShort(bb_pos + 8); }
  public byte prefix() { return bb.get(bb_pos + 10); }
  public long length() { return (long)bb.getInt(bb_pos + 12) & 0xFFFFFFFFL; }

  public static int createFoo(FlatBufferBuilder builder, long id, short count, byte prefix, long length) {
    builder.prep(8, 16);
    builder.putInt((int)length);
    builder.pad(1);
    builder.putByte(prefix);
    builder.putShort(count);
    builder.putLong(id);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Foo get(int j) { return get(new Foo(), j); }
    public Foo get(Foo obj, int j) {  return obj.__assign(__element(j), bb); }
  }
}

